pipeline {
    agent any
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    environment {
        LB_CREDENTIALS = 'credential_id'
        FN_CREDENTIALS = 'credential_id'
        TEMP_CREDENTIALS = 'credential_id'
    }
     parameters {
        choice(name: 'environment', choices: ['DEV', 'UAT', 'PROD'], description: 'Environment (DEV / UAT / PROD)')
    }

    
     stages {
        stage('Init') {
            
            steps {
                script {
                    switch (params.environment) {
                        case 'DEV':
                            TEMP_CREDENTIALS = FN_CREDENTIALS
                            break
                        case 'UAT':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                        case 'PROD':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break                        
                        default:
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break
                    }
                }
                withCredentials([azureServicePrincipal(TEMP_CREDENTIALS)]) {
                    script {
                        env.ARM_CLIENT_ID = AZURE_CLIENT_ID
                        env.ARM_CLIENT_SECRET = AZURE_CLIENT_SECRET
                        env.ARM_TENANT_ID = AZURE_TENANT_ID
                        env.ARM_SUBSCRIPTION_ID = AZURE_SUBSCRIPTION_ID
                    }
                    sh """
                    
                     cp -f backend-${params.environment}/backend-${params.environment}.tfvars .            
                    terraform version
                    terraform init -upgrade -reconfigure -no-color -backend-config="backend-${params.environment}.tfvars" -var client_secret=${ARM_CLIENT_SECRET} \
                            -var subscription_id=${ARM_SUBSCRIPTION_ID} \
                            -var tenant_id=${ARM_TENANT_ID} \
                            -var client_id=${ARM_CLIENT_ID}
                    """
                }
            }
        }
        
         stage('Update tfstate') {
            
            steps {
                script {
                    switch (params.environment) {
                        case 'DEV':
                            TEMP_CREDENTIALS = FN_CREDENTIALS
                            break
                        case 'UAT':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                        case 'PROD':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break                        
                        default:
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break
                    }
                }
                withCredentials([azureServicePrincipal(TEMP_CREDENTIALS)]) {
                    script {
                        env.ARM_CLIENT_ID = AZURE_CLIENT_ID
                        env.ARM_CLIENT_SECRET = AZURE_CLIENT_SECRET
                        env.ARM_TENANT_ID = AZURE_TENANT_ID
                        env.ARM_SUBSCRIPTION_ID = AZURE_SUBSCRIPTION_ID
                    }
                    sh """
                    terraform state rm module.virtual-machines 
                    terraform state rm module.extensions
                    """
                    }
            }
        }

         stage('Plan') {
            
            steps {
                script {
                    switch (params.environment) {
                        case 'DEV':
                            TEMP_CREDENTIALS = FN_CREDENTIALS
                            break
                        case 'UAT':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                        case 'PROD':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break                        
                        default:
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break
                    }
                }
                withCredentials([azureServicePrincipal(TEMP_CREDENTIALS)]) {
                    script {
                        env.ARM_CLIENT_ID = AZURE_CLIENT_ID
                        env.ARM_CLIENT_SECRET = AZURE_CLIENT_SECRET
                        env.ARM_TENANT_ID = AZURE_TENANT_ID
                        env.ARM_SUBSCRIPTION_ID = AZURE_SUBSCRIPTION_ID
                    }
                    sh """
                    terraform plan -no-color -out tfplan -var-file="terraform-${params.environment}.tfvars" -var client_secret=${ARM_CLIENT_SECRET} \
                            -var subscription_id=${ARM_SUBSCRIPTION_ID} \
                            -var tenant_id=${ARM_TENANT_ID} \
                            -var client_id=${ARM_CLIENT_ID}
                    """
                }
            }
        }

       


         stage('Waiting for Approval'){
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input (message: "Deploy the infrastructure?")
                }
            }
        
        }

         stage('Deploy') {
            
            steps {
                script {
                    switch (params.environment) {
                        case 'DEV':
                            TEMP_CREDENTIALS = FN_CREDENTIALS
                            break
                        case 'UAT':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                        case 'PROD':
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break                        
                        default:
                            TEMP_CREDENTIALS = LB_CREDENTIALS
                            break
                    }
                }
                withCredentials([azureServicePrincipal(TEMP_CREDENTIALS)]) {
                    script {
                        env.ARM_CLIENT_ID = AZURE_CLIENT_ID
                        env.ARM_CLIENT_SECRET = AZURE_CLIENT_SECRET
                        env.ARM_TENANT_ID = AZURE_TENANT_ID
                        env.ARM_SUBSCRIPTION_ID = AZURE_SUBSCRIPTION_ID
                    }
                    sh """
                    echo "Applying the plan"
                    terraform apply -no-color -auto-approve -input=false tfplan
                    """
                }
            }
        }
    }
   
}